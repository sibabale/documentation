{
  "openapi": "3.1.0",
  "info": {
    "title": "Rails Financial API",
    "description": "A secure financial services API for transaction processing, ledger management, and settlements",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@rails.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server (local)"
    },
    {
      "url": "https://api-dev.rails.com",
      "description": "Development environment"
    },
    {
      "url": "https://api-staging.rails.com",
      "description": "Staging environment"
    },
    {
      "url": "https://api.rails.com",
      "description": "Production environment"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/webhook": {
      "post": {
        "summary": "Process Transaction",
        "description": "Submit a financial transaction for processing. Transactions are validated, queued, and processed asynchronously.",
        "operationId": "processTransaction",
        "tags": ["Transactions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction accepted and queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/transactions": {
      "get": {
        "summary": "Query Transactions",
        "description": "Retrieve transaction history with filtering options",
        "operationId": "getTransactions",
        "tags": ["Transactions"],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID to filter transactions"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of transactions to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of transactions to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check API health and system status",
        "operationId": "healthCheck",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "System is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/status": {
      "get": {
        "summary": "Admin Status",
        "description": "Get system status and metrics (admin only)",
        "operationId": "getAdminStatus",
        "tags": ["Admin"],
        "security": [
          {
            "adminToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "System status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatus"
                }
              }
            }
          },
          "403": {
            "description": "Admin authorization required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Transaction": {
        "type": "object",
        "required": ["txn_ref", "userId", "amount", "type", "description", "source_account", "metadata"],
        "properties": {
          "txn_ref": {
            "type": "string",
            "pattern": "^[A-Z0-9_-]+$",
            "minLength": 1,
            "maxLength": 50,
            "description": "Unique transaction reference"
          },
          "userId": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "User ID for audit trail"
          },
          "amount": {
            "type": "number",
            "minimum": 0.01,
            "maximum": 999999.99,
            "multipleOf": 0.01,
            "description": "Transaction amount"
          },
          "type": {
            "type": "string",
            "enum": ["debit", "credit"],
            "description": "Transaction type"
          },
          "currency": {
            "type": "string",
            "length": 3,
            "default": "ZAR",
            "description": "ISO currency code"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Optional client timestamp"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Transaction description"
          },
          "source_account": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "Source account identifier"
          },
          "destination_account": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "Destination account (required for credits)"
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadata"
          }
        }
      },
      "TransactionMetadata": {
        "type": "object",
        "required": ["ip_address", "session_id"],
        "properties": {
          "ip_address": {
            "type": "string",
            "format": "ipv4",
            "description": "Originating IP address"
          },
          "session_id": {
            "type": "string",
            "description": "Session identifier"
          },
          "user_agent": {
            "type": "string",
            "maxLength": 500,
            "description": "User agent string"
          },
          "device_fingerprint": {
            "type": "string",
            "description": "Device fingerprint for fraud detection"
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Transaction received and validated"
          },
          "txn_ref": {
            "type": "string",
            "example": "TXN001"
          },
          "status": {
            "type": "string",
            "example": "queued"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TransactionList": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionRecord"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "TransactionRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Transaction"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": ["pending", "completed", "failed"],
                "description": "Transaction status"
              },
              "received_at": {
                "type": "string",
                "format": "date-time",
                "description": "Server timestamp when received"
              },
              "processed_at": {
                "type": "string",
                "format": "date-time",
                "description": "Server timestamp when processed"
              }
            }
          }
        ]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "HealthStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          }
        }
      },
      "AdminStatus": {
        "type": "object",
        "properties": {
          "system": {
            "type": "object",
            "properties": {
              "uptime": {
                "type": "number"
              },
              "memory_usage": {
                "type": "object"
              },
              "queue_size": {
                "type": "integer"
              }
            }
          },
          "ledger": {
            "type": "object",
            "properties": {
              "total_transactions": {
                "type": "integer"
              },
              "reserve_balance": {
                "type": "number"
              }
            }
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Validation failed"
          },
          "message": {
            "type": "string",
            "example": "Request contains invalid or missing required fields"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RateLimitError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Rate limit exceeded"
          },
          "message": {
            "type": "string",
            "example": "Too many requests from this IP"
          },
          "retry_after": {
            "type": "integer",
            "description": "Seconds to wait before retrying"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "JWT Bearer token for user authentication"
      },
      "adminToken": {
        "type": "apiKey",
        "in": "header",
        "name": "x-admin-token",
        "description": "Admin token for administrative operations"
      }
    }
  },
  "tags": [
    {
      "name": "Transactions",
      "description": "Financial transaction operations"
    },
    {
      "name": "System",
      "description": "System health and status"
    },
    {
      "name": "Admin",
      "description": "Administrative operations"
    }
  ]
}